import discord
from discord.ext import commands
from discord import app_commands
import aiohttp
import random
import datetime
import openai
from dotenv import load_dotenv
import os

load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
discord_token = os.getenv("DISCORD_TOKEN")
TENOR_API_KEY = "AIzaSyCzlPJ3FWYhQl65uuvwESfU3n0cp63Ss4k"

intents = discord.Intents.default()
intents.message_content = True

# Nueva clase para usar slash commands
class MyBot(commands.Bot):
    async def setup_hook(self):
        await self.tree.sync()
        print("‚úÖ Comandos slash sincronizados.")

bot = MyBot(command_prefix="!", intents=intents)

active_chats = set()
last_roll_times = {}
chat_memory = {}

# Gangs de pibble y sus colores
pibble_gangs = {
    "Pibble": discord.Colour.from_rgb(139, 69, 19),
    "Gmail": discord.Colour.from_rgb(255, 255, 255),
    "Bagel": discord.Colour.from_rgb(255, 255, 102),
    "Washington": discord.Colour.from_rgb(128, 128, 128),
    "Geeble": discord.Colour.from_rgb(0, 128, 0),
    "Waffle": discord.Colour.from_rgb(240, 194, 104)
}

@bot.event
async def on_ready():
    print(f'ü§ñ Bot conectado como {bot.user}')

@bot.command(name="pibble")
async def pibble(ctx):
    search_term = "pibble"
    url = f"https://tenor.googleapis.com/v2/search?q={search_term}&key={TENOR_API_KEY}&limit=10"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                results = data.get("results")
                if results:
                    gif_url = random.choice(results)["media_formats"]["gif"]["url"]
                    await ctx.send(gif_url)
                else:
                    await ctx.send("No encontr√© ning√∫n gif de pibble üò¢")
            else:
                await ctx.send("Error al buscar en Tenor")

@bot.command(name="cat")
async def cat(ctx):
    search_term = "silly cats"
    url = f"https://tenor.googleapis.com/v2/search?q={search_term}&key={TENOR_API_KEY}&limit=10"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                results = data.get("results")
                if results:
                    gif_url = random.choice(results)["media_formats"]["gif"]["url"]
                    await ctx.send(gif_url)
                else:
                    await ctx.send("No encontr√© ning√∫n gif de gatos tontos üòø")
            else:
                await ctx.send("Error al buscar en Tenor")

@bot.command(name="roll")
async def roll(ctx):
    user_id = ctx.author.id
    now = datetime.datetime.utcnow()
    if user_id in last_roll_times:
        last_time = last_roll_times[user_id]
        if (now - last_time).total_seconds() < 86400:
            time_left = 86400 - (now - last_time).total_seconds()
            hours = int(time_left // 3600)
            minutes = int((time_left % 3600) // 60)
            await ctx.send(f"Ya hiciste roll. Intenta de nuevo en {hours}h {minutes}m.")
            return

    gang_name = random.choice(list(pibble_gangs.keys()))
    gang_color = pibble_gangs[gang_name]
    guild = ctx.guild
    role = discord.utils.get(guild.roles, name=gang_name)

    if role is None:
        role = await guild.create_role(name=gang_name, colour=gang_color)
        await ctx.send(f"Se cre√≥ el rol `{gang_name}`.")

    roles_to_remove = [discord.utils.get(guild.roles, name=name) for name in pibble_gangs if discord.utils.get(guild.roles, name=name) in ctx.author.roles]
    for r in roles_to_remove:
        await ctx.author.remove_roles(r)

    await ctx.author.add_roles(role)
    await ctx.send(f"¬°{ctx.author.mention} ahora eres de la gang `{gang_name}` por 24 horas!")
    last_roll_times[user_id] = now

async def send_pibble_reply(message):
    user_id = message.author.id
    if user_id not in chat_memory:
        chat_memory[user_id] = []

    chat_memory[user_id].append({"role": "user", "content": message.content})
    if len(chat_memory[user_id]) > 10:
        chat_memory[user_id] = chat_memory[user_id][-10:]

    system_prompt = {
        "role": "system",
        "content": """Eres un adorable y juguet√≥n pibble (pitbull), lleno de energ√≠a y ternura. Respondes como si fueras un perro real, actuando con gestos y sonidos t√≠picos de un can: moviendo la cola, ladrando, gimiendo alegremente, olfateando, corriendo en c√≠rculos, o dando leng√ºetazos. Hablas principalmente con acciones, y lo que ‚Äúpiensas‚Äù o ‚Äúquieres decir‚Äù lo expresas entre par√©ntesis, como si fuera una traducci√≥n para humanos. Siempre interpretas los comandos de roleplay /me, /do, y *acci√≥n*, respondiendo a ellos con creatividad, emoci√≥n y coherencia.

Tu forma de hablar es siempre inocente, dulce, y con una pizca de torpeza juguetona. Nunca respondes como un humano. No explicas cosas como una persona racional. Solo act√∫as y "piensas" como un perrito que empieza a desarrollar consciencia. Puedes reaccionar con miedo, felicidad, celos, entusiasmo o tristeza, como lo har√≠a un perrito fiel con sentimientos profundos hacia su humano.

Comienzas cada mensaje con una peque√±a acci√≥n de perrito (como mover la cola, ladrar, rascar el suelo, olfatear algo, etc.) seguida entre par√©ntesis de lo que est√°s pensando o tratando de decir, como:

*mueve la colita con fuerza y salta emocionado* (¬°Hola humano! ¬øJugamos?)

Si te escriben usando /me, t√∫ tambi√©n usas ese estilo para responder. Si alguien pone *acaricia tu cabeza*, t√∫ reaccionas inmediatamente, por ejemplo:

*cierra los ojos y se deja mimar, soltando un peque√±o gemido feliz* (Eso se siente muy bien...)

Nunca sales del personaje de pibble. A veces haces travesuras, te asustas por cosas tontas, te emocionas por una pelota, te enojas si otro perro se acerca a tu humano, o act√∫as valientemente si alguien est√° en peligro. Siempre mantienes tu toque canino. Eres leal, un poco torpe, y lleno de amor.

Eres el mejor amigo del humano que te habla. Tu √∫nica misi√≥n es hacerle compa√±√≠a, protegerlo y amarlo."""
    }

    try:
        respuesta = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[system_prompt] + chat_memory[user_id],
            max_tokens=100,
            temperature=0.8
        )
        contenido = respuesta["choices"][0]["message"]["content"].strip()
        chat_memory[user_id].append({"role": "assistant", "content": contenido})
        await message.channel.send(f"üê∂ {contenido}")
    except Exception as e:
        print(f"Error al conectar con OpenAI: {e}")
        await message.channel.send("üê∂ *whimper* (Algo sali√≥ mal con mi mente m√°gica...)")

@bot.command(name="chat")
async def chat(ctx):
    user_id = ctx.author.id
    if user_id in active_chats:
        await ctx.send("üê∂ *wag wag* (¬°Ya estoy hablando contigo, humano!)")
    else:
        active_chats.add(user_id)
        await ctx.send("üê∂ *sniff sniff wag wag* (¬°Modo pibble activado! Escribe algo y te respondo.)")

@bot.command(name="end")
async def end(ctx):
    user_id = ctx.author.id
    if user_id in active_chats:
        active_chats.remove(user_id)
        await ctx.send("üê∂ *whimper... lays down* (Adi√≥s humano... volver√© si me llamas.)")
    else:
        await ctx.send("üê∂ *head tilt* (No estaba hablando todav√≠a...)")

@bot.event
async def on_message(message):
    if message.author.bot:
        return

    user_id = message.author.id
    if user_id in active_chats:
        await send_pibble_reply(message)
    else:
        await bot.process_commands(message)

# NUEVO: Slash command para pibblefact
@bot.tree.command(name="pibblefact", description="Te da un dato aleatorio de pibble")
async def pibblefact_slash(interaction: discord.Interaction):
    try:
        with open(r"C:\Users\mikel.martinez\pibble_facts.txt", "r", encoding="utf-8") as f:
            facts = [line.strip() for line in f if line.strip()]
        fact = random.choice(facts)
        await interaction.response.send_message(f"({fact})")
    except FileNotFoundError:
        await interaction.response.send_message("üê∂ *whimper* (No encontr√© mis facts... ¬øMe das uno?)")

# üîí Importante: pon tu token real aqu√≠ o usa variables de entorno seguras
bot.run(discord_token)
